package org.example.flyora_backend.service;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.example.flyora_backend.DTOs.WebhookType;
import org.example.flyora_backend.DTOs.WebhookURL;
import org.example.flyora_backend.model.Order;

import org.example.flyora_backend.repository.OrderRepository;

import org.springframework.stereotype.Service;
import vn.payos.PayOS;
import vn.payos.type.CheckoutResponseData;
import vn.payos.type.PaymentData;
import vn.payos.type.WebhookData;

import java.util.Map;

@Slf4j
@RequiredArgsConstructor
@Service
public class PayOSServiceImpl implements PayOSService {

    private final PayOS payOS;
    private final OrderRepository orderRepository;


    @Override
    public Map<String, String> createPaymentLink(int orderId, int amount) {
        // ‚ùå ƒê·ª´ng t·∫°o orderCode m·ªõi ·ªü ƒë√¢y
        Order order = orderRepository.findById(orderId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng"));

        String orderCode = order.getOrderCode(); // ‚úÖ L·∫•y t·ª´ DB

        try {
            PaymentData paymentData = PaymentData.builder()
                    .orderCode(Long.parseLong(orderCode)) // ph·∫£i l√† Long h·ª£p l·ªá
                    .amount(amount)
                    .description(orderCode)

                    .returnUrl("https://flyora-frontend.vercel.app/success-payment") 

                    .cancelUrl("https://flyora-frontend.vercel.app/cancel-payment") 
                    .build();

            CheckoutResponseData response = payOS.createPaymentLink(paymentData);

            log.info("T·∫°o link thanh to√°n th√†nh c√¥ng: {}", response.getCheckoutUrl());

            return Map.of(
                    "paymentUrl", response.getCheckoutUrl(),
                    "orderCode", orderCode);
        } catch (Exception e) {
            throw new RuntimeException("L·ªói khi t·∫°o link thanh to√°n: " + e.getMessage(), e);
        }
    }

    @Override
    public void handlePaymentWebhook(WebhookType webhookData) {

        log.info("üì© D·ªØ li·ªáu webhook: {}", webhookData);

        WebhookData data = webhookData.getData();
        if (data == null || data.getOrderCode() == 0) {
            log.error("‚ùå Thi·∫øu orderCode trong webhook");

            return;
        }

        String orderCode = String.valueOf(data.getOrderCode());

        String statusCode = webhookData.getCode();
        boolean success = webhookData.isSuccess();

        try {
            Order order = orderRepository.findByOrderCode(orderCode)
                    .orElseThrow(() -> new RuntimeException("‚ùå Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng v·ªõi orderCode: " + orderCode));

            if (success || "00".equals(statusCode)) {
                if (!"PAID".equalsIgnoreCase(order.getStatus())) {
                    order.setStatus("PAID");
                    orderRepository.save(order);
                    log.info("‚úÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng [{}] => PAID", orderCode);
                } else {
                    log.info("‚ÑπÔ∏è ƒê∆°n h√†ng [{}] ƒë√£ ·ªü tr·∫°ng th√°i PAID", orderCode);
                }
            } else {
                // N·∫øu thanh to√°n kh√¥ng th√†nh c√¥ng
                if (!"PAID".equalsIgnoreCase(order.getStatus())) {
                    order.setStatus("CANCELLED");
                    orderRepository.save(order);
                    log.warn("‚ö†Ô∏è C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng [{}] => CANCELLED do thanh to√°n th·∫•t b·∫°i", orderCode);
                }
            }

        } catch (Exception e) {
            log.error("‚ùå L·ªói c·∫≠p nh·∫≠t ƒë∆°n h√†ng theo webhook: {}", e.getMessage(), e);
        }

    }

    

    @Override
    public String confirmWebhook(WebhookURL body) {
        log.info("üîî Webhook x√°c nh·∫≠n t·ª´: {}", body.getWebhookUrl());
        return "Webhook confirmed: " + body.getWebhookUrl();
    }
}
