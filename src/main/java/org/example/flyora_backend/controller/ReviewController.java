package org.example.flyora_backend.controller;

import java.util.Map;
import org.example.flyora_backend.DTOs.ProductReviewDTO;
import org.example.flyora_backend.service.AccessLogService;
import org.example.flyora_backend.service.ReviewService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;

@RestController
@RequestMapping("/api/v1/reviews")
@RequiredArgsConstructor
@Tag(name = "Product Review", description = "G·ª≠i ƒë√°nh gi√° cho s·∫£n ph·∫©m")
public class ReviewController {

    private final ReviewService reviewService;

    @Autowired
    private AccessLogService accessLogService;

    @PostMapping("/submit")
    @Operation(
        summary = "G·ª≠i ƒë√°nh gi√° s·∫£n ph·∫©m",
        description = """
            G·ª≠i ƒë√°nh gi√° v√† b√¨nh lu·∫≠n c·ªßa kh√°ch h√†ng v·ªÅ m·ªôt s·∫£n ph·∫©m ƒë√£ mua.

            ‚úÖ Tr∆∞·ªùng y√™u c·∫ßu trong body (ProductReviewDTO):
            - customerId (Integer): ID c·ªßa kh√°ch h√†ng
            - productId (Integer): ID c·ªßa s·∫£n ph·∫©m
            - rating (Integer): ƒëi·ªÉm ƒë√°nh gi√° t·ª´ 1 ƒë·∫øn 5
            - comment (String): n·ªôi dung ƒë√°nh gi√° (t·ªëi ƒëa 500 k√Ω t·ª±, c√≥ th·ªÉ ƒë·ªÉ tr·ªëng)

            üîÅ Tr·∫£ v·ªÅ: Th√¥ng b√°o th√†nh c√¥ng ho·∫∑c l·ªói n·∫øu c√≥ v·∫•n ƒë·ªÅ x·∫£y ra.
        """
    )
    public ResponseEntity<?> submitReview(@Valid @RequestBody ProductReviewDTO request) {
        try {
            accessLogService.logAction(request.getCustomerId(), "G·ª≠i ƒë√°nh gi√° s·∫£n ph·∫©m");
            return ResponseEntity.ok(reviewService.submitReview(request));
        } catch (Exception e) {
            return ResponseEntity
                .status(500)
                .body(Map.of("error", "ƒê√°nh gi√° th·∫•t b·∫°i: " + e.getMessage()));
        }
    }

    @GetMapping("/product/{productId}")
    @Operation(
        summary = "Xem ƒë√°nh gi√° s·∫£n ph·∫©m",
        description = """
            Tr·∫£ v·ªÅ danh s√°ch t·∫•t c·∫£ ƒë√°nh gi√° c·ªßa kh√°ch h√†ng cho m·ªôt s·∫£n ph·∫©m c·ª• th·ªÉ.

            ‚úÖ ƒê∆∞·ªùng d·∫´n:
            - productId (Integer): ID c·ªßa s·∫£n ph·∫©m c·∫ßn l·∫•y ƒë√°nh gi√°

            üîÅ Tr·∫£ v·ªÅ: Danh s√°ch c√°c ƒë√°nh gi√° g·ªìm th√¥ng tin customerId, productId, rating, comment.
        """
    )
    public ResponseEntity<?> getReviewsForProduct(@PathVariable Integer productId) {
        try {
            return ResponseEntity.ok(reviewService.getReviewsByProduct(productId));
        } catch (Exception e) {
            return ResponseEntity
                .status(500)
                .body(Map.of("error", "Kh√¥ng th·ªÉ l·∫•y ƒë√°nh gi√°: " + e.getMessage()));
        }
    }
}