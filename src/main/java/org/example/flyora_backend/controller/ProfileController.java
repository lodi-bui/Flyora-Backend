package org.example.flyora_backend.controller;

import org.example.flyora_backend.DTOs.ChangePasswordDTO;
import org.example.flyora_backend.DTOs.ProfileDTO;
import org.example.flyora_backend.DTOs.UpdateProfileDTO;
import org.example.flyora_backend.model.Account;
import org.example.flyora_backend.service.AccessLogService;
import org.example.flyora_backend.service.ProfileService;
import org.example.flyora_backend.utils.JwtUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import lombok.RequiredArgsConstructor;

@RestController
@RequestMapping("/api/v1/profile")
@Tag(name = "Account's Profile")
@RequiredArgsConstructor
public class ProfileController {
    private final JwtUtil jwtUtil;
    private final ProfileService profileService;

    @Autowired
    private AccessLogService accessLogService;

    @GetMapping
    @Operation(
        summary = "Xem h·ªì s∆° ng∆∞·ªùi d√πng",
        description = """
            Tr·∫£ v·ªÅ th√¥ng tin h·ªì s∆° ng∆∞·ªùi d√πng t·ª´ token.

            üìå Header c·∫ßn c√≥: `Authorization: Bearer {token}`

            üîÅ Tr·∫£ v·ªÅ: ProfileDTO g·ªìm th√¥ng tin c∆° b·∫£n c·ªßa ng∆∞·ªùi d√πng.
        """
    )
    public ResponseEntity<ProfileDTO> getProfile(@RequestHeader("Authorization") String token) {
        Account account = jwtUtil.getAccountFromToken(token);
        accessLogService.logAction(account.getId(), "Xem h·ªì s∆° ng∆∞·ªùi d√πng");
        return ResponseEntity.ok(profileService.getProfile(account));
    }

    
    @PutMapping
    @Operation(
        summary = "C·∫≠p nh·∫≠t h·ªì s∆° ng∆∞·ªùi d√πng",
        description = """
            C·∫≠p nh·∫≠t th√¥ng tin h·ªì s∆° nh∆∞ t√™n, email, s·ªë ƒëi·ªán tho·∫°i (t√πy lo·∫°i t√†i kho·∫£n).

            üìå Header: `Authorization: Bearer {token}`
            üìå Body: UpdateProfileDTO

            üîÅ Tr·∫£ v·ªÅ: 200 OK n·∫øu th√†nh c√¥ng.
        """
    )
    public ResponseEntity<Void> updateProfile(@RequestHeader("Authorization") String token,
                                              @RequestBody UpdateProfileDTO request) {
        Account account = jwtUtil.getAccountFromToken(token);
        profileService.updateProfile(account, request);
        accessLogService.logAction(account.getId(), "C·∫≠p nh·∫≠t h·ªì s∆° ng∆∞·ªùi d√πng");
        return ResponseEntity.ok().build();
    }

    @PutMapping("/password")
    @Operation(
        summary = "Thay ƒë·ªïi m·∫≠t kh·∫©u",
        description = """
            Thay ƒë·ªïi m·∫≠t kh·∫©u cho t√†i kho·∫£n hi·ªán t·∫°i.

            üìå Header: `Authorization: Bearer {token}`
            üìå Body: ChangePasswordDTO g·ªìm oldPassword v√† newPassword

            üîÅ Tr·∫£ v·ªÅ: 200 OK n·∫øu thay ƒë·ªïi th√†nh c√¥ng.
        """
    )
    public ResponseEntity<Void> changePassword(
            @RequestHeader("Authorization") String token,
            @RequestBody ChangePasswordDTO request) {


        Account account = jwtUtil.getAccountFromToken(token);
        profileService.changePassword(account, request);
        accessLogService.logAction(account.getId(), "Thay ƒë·ªïi m·∫≠t kh·∫©u");
        return ResponseEntity.ok().build();
    }

}
