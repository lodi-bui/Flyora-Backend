package org.example.flyora_backend.controller;

import java.util.ArrayList;
import java.util.List;

import org.example.flyora_backend.DTOs.CartItemDTO;
import org.example.flyora_backend.DTOs.CartRequestDTO;
import org.example.flyora_backend.service.CartService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;

@RestController
@RequestMapping("/api/v1/cart")
@Tag(name = "Cart Services", description = "API cho thao t√°c gi·ªè h√†ng (kh√¥ng l∆∞u v√†o database)")
public class CartController {

    @Autowired
    private CartService cartService;

    @GetMapping
    @Operation(
        summary = "Xem gi·ªè h√†ng (d√πng GET)",
        description = """
            Nh·∫≠n danh s√°ch s·∫£n ph·∫©m t·ª´ client th√¥ng qua query params.

            ‚ö†Ô∏è √Åp d·ª•ng khi d·ªØ li·ªáu ƒë∆°n gi·∫£n v√† s·ªë l∆∞·ª£ng √≠t.

            ‚úÖ Tham s·ªë d·∫°ng:
            - productId: Danh s√°ch id s·∫£n ph·∫©m (VD: `productId=1&productId=2`)
            - quantity: Danh s√°ch s·ªë l∆∞·ª£ng t∆∞∆°ng ·ª©ng (VD: `quantity=2&quantity=1`)

            üîÅ Tr·∫£ v·ªÅ: Danh s√°ch CartItemDTO g·ªìm productId, name, imageUrl, quantity.
        """
    )
    public ResponseEntity<List<CartItemDTO>> getCart(
            @RequestParam List<Integer> productId,
            @RequestParam List<Integer> quantity) {
        List<CartRequestDTO> requests = new ArrayList<>();
        for (int i = 0; i < productId.size(); i++) {
            requests.add(new CartRequestDTO(productId.get(i), quantity.get(i)));
        }
        return ResponseEntity.ok(cartService.getCartItems(requests));
    }

    @PostMapping
    @Operation(
        summary = "Xem gi·ªè h√†ng (d√πng POST)",
        description = """
            Nh·∫≠n danh s√°ch s·∫£n ph·∫©m t·ª´ client th√¥ng qua body JSON.

            ‚úÖ Body (List<CartRequestDTO>):
            - productId (Integer)
            - quantity (Integer)

            ‚ö†Ô∏è ∆Øu ƒëi·ªÉm so v·ªõi GET:
            - G·ª≠i ƒë∆∞·ª£c nhi·ªÅu s·∫£n ph·∫©m h∆°n, kh√¥ng gi·ªõi h·∫°n ƒë·ªô d√†i URL.
            - D·ªØ li·ªáu r√µ r√†ng v√† d·ªÖ m·ªü r·ªông.

            üîÅ Tr·∫£ v·ªÅ: Danh s√°ch CartItemDTO g·ªìm productId, name, imageUrl, quantity.
        """
    )
    public ResponseEntity<List<CartItemDTO>> viewCart(@RequestBody List<CartRequestDTO> requests) {
        return ResponseEntity.ok(cartService.getCartItems(requests));
    }

    @PutMapping("/{productId}")
    @Operation(
        summary = "C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong gi·ªè h√†ng",
        description = """
            ‚úÖ ƒê∆∞·ªùng d·∫´n:
            - productId: id s·∫£n ph·∫©m mu·ªën c·∫≠p nh·∫≠t

            ‚úÖ Query param:
            - quantity (Integer): s·ªë l∆∞·ª£ng m·ªõi

            üîÅ Tr·∫£ v·ªÅ: CartItemDTO ƒë√£ c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng.
        """
    )
    public ResponseEntity<CartItemDTO> updateQuantity(
            @PathVariable Integer productId,
            @RequestParam Integer quantity) {
        return ResponseEntity.ok(cartService.updateItem(productId, quantity));
    }

    @DeleteMapping("/{productId}")
    @Operation(
        summary = "Xo√° 1 s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng",
        description = """
            ‚úÖ ƒê∆∞·ªùng d·∫´n:
            - productId: id s·∫£n ph·∫©m mu·ªën xo√°

            üîÅ Tr·∫£ v·ªÅ: Th√¥ng b√°o xo√° th√†nh c√¥ng.
        """
    )
    public ResponseEntity<String> deleteItem(@PathVariable Integer productId) {
        return ResponseEntity.ok("Deleted product " + productId + " from cart.");
    }

    @DeleteMapping("/clear")
    @Operation(
        summary = "Xo√° to√†n b·ªô gi·ªè h√†ng",
        description = """
            Xo√° t·∫•t c·∫£ s·∫£n ph·∫©m ƒëang c√≥ trong gi·ªè h√†ng ph√≠a client.

            üîÅ Tr·∫£ v·ªÅ: Th√¥ng b√°o ƒë√£ xo√° gi·ªè h√†ng.
        """
    )
    public ResponseEntity<String> clearCart() {
        return ResponseEntity.ok("Cart cleared.");
    }
}