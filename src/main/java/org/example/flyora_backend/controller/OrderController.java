package org.example.flyora_backend.controller;

import java.util.List;
import java.util.Map;

import org.example.flyora_backend.DTOs.CreateOrderDTO;
import org.example.flyora_backend.DTOs.CreatePaymentDTO;
import org.example.flyora_backend.DTOs.OrderHistoryDTO;
import org.example.flyora_backend.service.AccessLogService;
import org.example.flyora_backend.service.OrderService;
import org.example.flyora_backend.service.PaymentService;
import org.example.flyora_backend.utils.VNPayUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.servlet.http.HttpServletRequest;
import lombok.*;

@RestController
@RequestMapping("/api/v1")
@Tag(name = "Order & Payment", description = "C√°c API ƒë·ªÉ t·∫°o ƒë∆°n h√†ng v√† th·ª±c hi·ªán thanh to√°n")
@RequiredArgsConstructor
public class OrderController {

    private final OrderService orderService;

    @Autowired
    private AccessLogService accessLogService;

    @Autowired
    private PaymentService paymentService;

    @PostMapping("/orders")
    @Operation(summary = "T·∫°o ƒë∆°n h√†ng m·ªõi", description = """
                ‚úÖ Body (CreateOrderDTO):
                - customerId: ID c·ªßa kh√°ch h√†ng
                - items: Danh s√°ch s·∫£n ph·∫©m mu·ªën ƒë·∫∑t (m·ªói item g·ªìm productId v√† quantity)

                üõí H·ªá th·ªëng s·∫Ω t·∫°o m·ªõi ƒë∆°n h√†ng v·ªõi tr·∫°ng th√°i `PENDING`.

                üîÅ Tr·∫£ v·ªÅ: orderId v√† tr·∫°ng th√°i ƒë∆°n h√†ng.
            """)
    public ResponseEntity<?> createOrder(@RequestBody CreateOrderDTO dto) {
        accessLogService.logAction(dto.getCustomerId(), "T·∫°o ƒë∆°n h√†ng");
        return ResponseEntity.ok(orderService.createOrder(dto));
    }

    @PostMapping("/payments")
    @Operation(summary = "T·∫°o ho·∫∑c x√°c nh·∫≠n thanh to√°n ƒë∆°n h√†ng", description = """
                ‚úÖ Body (CreatePaymentDTO):
                - orderId: ID c·ªßa ƒë∆°n h√†ng
                - customerId: ID kh√°ch h√†ng th·ª±c hi·ªán thanh to√°n
                - paymentMethodId: ID ph∆∞∆°ng th·ª©c thanh to√°n (1 = VNPay, 2 = COD)
                - amount: S·ªë ti·ªÅn thanh to√°n (ch·ªâ d√πng cho VNPay)

                üí≥ N·∫øu ch·ªçn VNPay:
                - H·ªá th·ªëng t·∫°o URL chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang thanh to√°n.

                üöö N·∫øu ch·ªçn COD:
                - Ghi nh·∫≠n thanh to√°n v√† l∆∞u tr·∫°ng th√°i `PAID` ngay.

                üîÅ Tr·∫£ v·ªÅ:
                - V·ªõi VNPay: URL thanh to√°n
                - V·ªõi COD: paymentId v√† tr·∫°ng th√°i thanh to√°n
            """)
    public ResponseEntity<?> createOrRedirectPayment(@RequestBody CreatePaymentDTO dto, HttpServletRequest request) {
        accessLogService.logAction(dto.getCustomerId(), "Thanh to√°n ƒë∆°n h√†ng");

        if (dto.getPaymentMethodId() == 1) { // VNPay
            if (dto.getAmount() == null || dto.getAmount() <= 0) {
                return ResponseEntity.badRequest().body(Map.of("error", "S·ªë ti·ªÅn thanh to√°n kh√¥ng h·ª£p l·ªá."));
            }

            String url = paymentService.createVnPayPayment(request, dto);
            return ResponseEntity.ok(Map.of("paymentUrl", url));

        } else if (dto.getPaymentMethodId() == 2) { // COD
            return ResponseEntity.ok(orderService.createPayment(dto));

        } else {
            return ResponseEntity.badRequest().body(Map.of("error", "Ph∆∞∆°ng th·ª©c thanh to√°n kh√¥ng h·ª£p l·ªá."));
        }
    }

    @GetMapping("/payment/vn-pay-callback")
    @Operation(summary = "X·ª≠ l√Ω callback t·ª´ VNPay sau khi thanh to√°n", description = """
                ‚úÖ VNPay s·∫Ω redirect v·ªÅ URL n√†y v·ªõi c√°c tham s·ªë nh∆∞ vnp_TxnRef, vnp_ResponseCode, vnp_Amount, vnp_SecureHash...

                üìå B·∫°n c·∫ßn x√°c minh ch·ªØ k√Ω `vnp_SecureHash`, ki·ªÉm tra m√£ giao d·ªãch, c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng v√† ghi nh·∫≠n thanh to√°n.

                üõ† N·∫øu h·ª£p l·ªá: C·∫≠p nh·∫≠t ƒë∆°n h√†ng ‚Üí PAID
            """)
    public ResponseEntity<?> handleVnPayCallback(HttpServletRequest request) {
        Map<String, String> params = VNPayUtil.getVNPayResponseParams(request);
        String vnp_ResponseCode = params.get("vnp_ResponseCode");
        String vnp_TxnRef = params.get("vnp_TxnRef");

        // TODO: x√°c minh ch·ªØ k√Ω, x√°c minh txnRef n·∫øu c·∫ßn

        if ("00".equals(vnp_ResponseCode)) {
            // ‚úÖ Th√†nh c√¥ng: c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng + payment
            // C√≥ th·ªÉ g·ªçi orderService.markOrderAsPaidByTxnRef(vnp_TxnRef);
            return ResponseEntity.ok("Thanh to√°n th√†nh c√¥ng. M√£ giao d·ªãch: " + vnp_TxnRef);
        } else {
            return ResponseEntity.ok("Thanh to√°n th·∫•t b·∫°i ho·∫∑c b·ªã h·ªßy.");
        }
    }

    @GetMapping("/my-orders")
    @Operation(summary = "Xem l·ªãch s·ª≠ ƒë∆°n h√†ng c·ªßa kh√°ch h√†ng", description = """
                ‚úÖ Query param:
                - customerId: ID c·ªßa kh√°ch h√†ng mu·ªën xem l·ªãch s·ª≠

                üì¶ Tr·∫£ v·ªÅ danh s√°ch ƒë∆°n h√†ng theo th·ª© t·ª± m·ªõi nh·∫•t,
                m·ªói ƒë∆°n g·ªìm th√¥ng tin ƒë∆°n h√†ng + danh s√°ch s·∫£n ph·∫©m ƒë√£ ƒë·∫∑t.
            """)
    public ResponseEntity<List<OrderHistoryDTO>> getMyOrders(@RequestParam Integer customerId) {
        accessLogService.logAction(customerId, "Xem l·ªãch s·ª≠ ƒë∆°n h√†ng");
        return ResponseEntity.ok(orderService.getOrdersByCustomer(customerId));
    }
}