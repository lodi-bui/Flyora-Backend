package org.example.flyora_backend.controller;

import java.util.List;
import java.util.Map;

import org.example.flyora_backend.DTOs.CreateOrderDTO;
import org.example.flyora_backend.DTOs.CreatePaymentDTO;
import org.example.flyora_backend.DTOs.OrderHistoryDTO;
import org.example.flyora_backend.service.AccessLogService;
import org.example.flyora_backend.service.OrderService;
import org.example.flyora_backend.service.PaymentService;
import org.example.flyora_backend.Utils.VNPayUtil;
import org.example.flyora_backend.model.Order;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.servlet.http.HttpServletRequest;
import lombok.*;

@RestController
@RequestMapping("/api/v1")
@Tag(name = "Order & Payment", description = "C√°c API ƒë·ªÉ t·∫°o ƒë∆°n h√†ng v√† th·ª±c hi·ªán thanh to√°n")
@RequiredArgsConstructor
public class OrderController {

    private final OrderService orderService;

    @Autowired
    private AccessLogService accessLogService;

    @Autowired
    private PaymentService paymentService;

    @PostMapping("/orders")
    @Operation(summary = "[Quy tr√¨nh B∆∞·ªõc 1] T·∫°o ƒë∆°n h√†ng nh√°p", description = """
            T·∫°o m·ªôt ƒë∆°n h√†ng m·ªõi trong h·ªá th·ªëng v·ªõi tr·∫°ng th√°i "PENDING".
            ƒê√¢y l√† b∆∞·ªõc ƒë·∫ßu ti√™n v√† b·∫Øt bu·ªôc trong quy tr√¨nh ƒë·∫∑t h√†ng.

            üîë **Quy·ªÅn truy c·∫≠p:** Kh√°ch h√†ng ƒë√£ ƒëƒÉng nh·∫≠p.

            ‚úÖ **Body y√™u c·∫ßu (CreateOrderDTO):**
            - `customerId` (integer): ID c·ªßa kh√°ch h√†ng ƒëang ƒë·∫∑t h√†ng.
            - `items` (array): Danh s√°ch s·∫£n ph·∫©m, m·ªói s·∫£n ph·∫©m g·ªìm `productId` v√† `quantity`.

            üîÅ **Tr·∫£ v·ªÅ:** `orderId` v√† `status` ("PENDING") c·ªßa ƒë∆°n h√†ng v·ª´a t·∫°o.
            """)
    public ResponseEntity<?> createOrder(@RequestBody CreateOrderDTO dto) {
        accessLogService.logAction(dto.getCustomerId(), "T·∫°o ƒë∆°n h√†ng");
        return ResponseEntity.ok(orderService.createOrder(dto));
    }

    @PostMapping("/payments")
    @Operation(summary = "[Quy tr√¨nh B∆∞·ªõc 2] X√°c nh·∫≠n thanh to√°n & Giao h√†ng", description = """
            X√°c nh·∫≠n ph∆∞∆°ng th·ª©c thanh to√°n cho m·ªôt ƒë∆°n h√†ng ƒë√£ t·∫°o ·ªü B∆∞·ªõc 1.
            **ƒê√¢y l√† API then ch·ªët ƒë·ªÉ k√≠ch ho·∫°t vi·ªác t·ª± ƒë·ªông t·∫°o ƒë∆°n v·∫≠n chuy·ªÉn v√† l∆∞u v√†o database.**

            üîë **Quy·ªÅn truy c·∫≠p:** Kh√°ch h√†ng ƒë√£ ƒëƒÉng nh·∫≠p.

            ‚úÖ **Body y√™u c·∫ßu (CreatePaymentDTO):**
            - `orderId` (integer): ID c·ªßa ƒë∆°n h√†ng (l·∫•y t·ª´ API B∆∞·ªõc 1).
            - `customerId` (integer): ID c·ªßa kh√°ch h√†ng.
            - `paymentMethodId` (integer): 1 (VNPay) ho·∫∑c 2 (COD).
            - `amount` (long, *ch·ªâ cho VNPay*): T·ªïng s·ªë ti·ªÅn thanh to√°n.
            - **C√°c tr∆∞·ªùng ƒë·ªãa ch·ªâ (b·∫Øt bu·ªôc cho COD):** `to_name`, `to_phone`, `to_address`, `to_ward_code`, `to_district_id`.

            üîÅ **H√†nh vi v√† K·∫øt qu·∫£ tr·∫£ v·ªÅ:**
            - **V·ªõi Payos (1):** Tr·∫£ v·ªÅ m·ªôt `paymentUrl` ƒë·ªÉ frontend chuy·ªÉn h∆∞·ªõng ng∆∞·ªùi d√πng. **Vi·ªác giao h√†ng s·∫Ω ƒë∆∞·ª£c k√≠ch ho·∫°t ·ªü API callback.**
            - **V·ªõi COD (2):** **H·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông g·ªçi GHN ƒë·ªÉ t·∫°o ƒë∆°n v·∫≠n chuy·ªÉn, sau ƒë√≥ l∆∞u m√£ v·∫≠n ƒë∆°n v√† c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng th√†nh "Shipping".** Tr·∫£ v·ªÅ `paymentId` v√† `orderStatus`.
            """)
    public ResponseEntity<?> createOrRedirectPayment(@RequestBody CreatePaymentDTO dto, HttpServletRequest request) {
        accessLogService.logAction(dto.getCustomerId(), "Thanh to√°n ƒë∆°n h√†ng");

        if (dto.getPaymentMethodId() == 1) { // VNPay (PayOS trong th·ª±c t·∫ø)
            if (dto.getAmount() == null || dto.getAmount() <= 0) {
                return ResponseEntity.badRequest().body(Map.of("error", "S·ªë ti·ªÅn thanh to√°n kh√¥ng h·ª£p l·ªá."));
            }

            try {
                Map<String, String> result = paymentService.createPayOSPayment(dto.getOrderId(), dto.getAmount());
                String url = result.get("paymentUrl");
                String payosOrderCode = result.get("orderCode");

                // ‚úÖ G√°n orderCode t·ª´ PayOS v√†o DB
                orderService.attachOrderCode(dto.getOrderId(), payosOrderCode);

                return ResponseEntity.ok(Map.of(
                        "paymentUrl", url,
                        "orderCode", payosOrderCode));

            } catch (Exception ex) {
                ex.printStackTrace();
                return ResponseEntity.status(500).body(Map.of("error", "L·ªói h·ªá th·ªëng: " + ex.getMessage()));
            }

        } else if (dto.getPaymentMethodId() == 2) { // COD
            return ResponseEntity.ok(orderService.createPayment(dto));
        } else {
            return ResponseEntity.badRequest().body(Map.of("error", "Ph∆∞∆°ng th·ª©c thanh to√°n kh√¥ng h·ª£p l·ªá."));
        }
    }

    @GetMapping("/payment/vn-pay-callback")
    @Operation(summary = "[Callback] X·ª≠ l√Ω k·∫øt qu·∫£ tr·∫£ v·ªÅ t·ª´ VNPay", description = """
            **API n√†y kh√¥ng d√†nh cho frontend g·ªçi tr·ª±c ti·∫øp.**
            VNPay s·∫Ω t·ª± ƒë·ªông g·ªçi v·ªÅ URL n√†y sau khi ng∆∞·ªùi d√πng ho√†n t·∫•t thanh to√°n.

            - **Logic backend:** N·∫øu thanh to√°n th√†nh c√¥ng (`vnp_ResponseCode` = "00"), backend s·∫Ω th·ª±c hi·ªán quy tr√¨nh t·∫°o ƒë∆°n v·∫≠n chuy·ªÉn v·ªõi GHN v√† c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng (t∆∞∆°ng t·ª± nh∆∞ khi ch·ªçn COD).
            """)
    public ResponseEntity<?> handleVnPayCallback(HttpServletRequest request) {
        Map<String, String> params = VNPayUtil.getVNPayResponseParams(request);
        String vnp_ResponseCode = params.get("vnp_ResponseCode");
        String vnp_TxnRef = params.get("vnp_TxnRef");

        if ("00".equals(vnp_ResponseCode)) {
            // ‚úÖ Th√†nh c√¥ng: c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng + payment
            // C√≥ th·ªÉ g·ªçi orderService.markOrderAsPaidByTxnRef(vnp_TxnRef);
            return ResponseEntity.ok("Thanh to√°n th√†nh c√¥ng. M√£ giao d·ªãch: " + vnp_TxnRef);
        } else {
            return ResponseEntity.ok("Thanh to√°n th·∫•t b·∫°i ho·∫∑c b·ªã h·ªßy.");
        }
    }

    @GetMapping("/my-orders")
    @Operation(summary = "Xem l·ªãch s·ª≠ ƒë∆°n h√†ng c·ªßa kh√°ch h√†ng", description = """
            L·∫•y danh s√°ch t·∫•t c·∫£ c√°c ƒë∆°n h√†ng ƒë√£ ƒë·∫∑t c·ªßa m·ªôt kh√°ch h√†ng c·ª• th·ªÉ, s·∫Øp x·∫øp theo th·ª© t·ª± m·ªõi nh·∫•t.

            üîë **Quy·ªÅn truy c·∫≠p:** Kh√°ch h√†ng ƒë√£ ƒëƒÉng nh·∫≠p.

            - **`customerId`** (param): ID c·ªßa kh√°ch h√†ng c·∫ßn xem l·ªãch s·ª≠.

            üîÅ **Tr·∫£ v·ªÅ:** Danh s√°ch ƒë∆°n h√†ng, m·ªói ƒë∆°n h√†ng bao g·ªìm th√¥ng tin chung v√† danh s√°ch chi ti·∫øt c√°c s·∫£n ph·∫©m.
            """)
    public ResponseEntity<List<OrderHistoryDTO>> getMyOrders(@RequestParam Integer customerId) {
        accessLogService.logAction(customerId, "Xem l·ªãch s·ª≠ ƒë∆°n h√†ng");
        return ResponseEntity.ok(orderService.getOrdersByCustomer(customerId));
    }

    @GetMapping("/payment/cancel")
    public ResponseEntity<?> handleCancelledPayment(@RequestParam String orderCode) {
        Order order = orderService.getOrderByCode(orderCode);
        if (order == null) {
            return ResponseEntity.badRequest().body(Map.of("error", "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng."));
        }

        if (!"PAID".equalsIgnoreCase(order.getStatus())) {
            order.setStatus("CANCELLED");
            orderService.save(order);
            return ResponseEntity.ok(Map.of(
                    "orderCode", orderCode,
                    "status", "CANCELLED"));
        } else {
            return ResponseEntity.ok(Map.of(
                    "orderCode", orderCode,
                    "status", "PAID"));
        }
    }

}