    package org.example.flyora_backend.controller;

    import java.time.ZoneId;
    import java.util.List;
    import java.util.Optional;
    import java.util.stream.Collectors;

    import org.example.flyora_backend.DTOs.AccessLogDTO;
    import org.example.flyora_backend.DTOs.AccountDTO;
    import org.example.flyora_backend.model.Account;
    import org.example.flyora_backend.repository.AccessLogRepository;
    import org.example.flyora_backend.repository.AccountRepository;
import org.example.flyora_backend.service.AccessLogService;
import org.example.flyora_backend.service.AccountService;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.annotation.*;
    
    import io.swagger.v3.oas.annotations.Operation;
    import io.swagger.v3.oas.annotations.tags.Tag;

    @RestController
    @RequestMapping("/api/v1/admin/accounts")
    @Tag(name = "Admin Services")
    public class AdminController {
        
        @Autowired
        private AccountRepository accountRepository;

        @Autowired
        private AccountService accountService;

        @Autowired
        private AccessLogRepository accessLogRepository;

        @Autowired
        private AccessLogService accessLogService;


        private void verifyAdmin(Integer requestAccountId) {
            Optional<Account> optionalAcc = accountRepository.findById(requestAccountId);        
            if(optionalAcc.isPresent()) {
                Account acc = optionalAcc.get();
                if(!acc.getRole().getName().equalsIgnoreCase("Admin")) {
                    throw new RuntimeException("Access denied");
                }
            }
        }

        @PostMapping
        @Operation(
            summary = "T·∫°o t√†i kho·∫£n m·ªõi",
            description = """
                T·∫°o m·ªõi t√†i kho·∫£n (ch·ªâ d√†nh cho Admin).

                ‚úÖ Tr∆∞·ªùng y√™u c·∫ßu trong body (AccountDTO):
                - username (String)
                - password (String)
                - phone (String)
                - roleId (Integer): 1=ADMIN, 2=SHOPOWNER, 3=SALESSTAFF, 4=CUSTOMER
                - approvedBy (Integer): ID c·ªßa admin duy·ªát

                üìå `requesterId` l√† ID c·ªßa t√†i kho·∫£n g·ª≠i request, d√πng ƒë·ªÉ x√°c th·ª±c quy·ªÅn admin.

                üîÅ Tr·∫£ v·ªÅ: Account ƒë√£ t·∫°o n·∫øu th√†nh c√¥ng.
            """
        )
        public ResponseEntity<?> createAccount(@RequestBody AccountDTO dto, @RequestParam Integer requesterId) {
            verifyAdmin(requesterId);
            accessLogService.logAction(requesterId, "T·∫°o t√†i kho·∫£n m·ªõi");
            return ResponseEntity.ok(accountService.createAccount(dto));
        }

        @GetMapping
        @Operation(
            summary = "Xem danh s√°ch t·∫•t c·∫£ t√†i kho·∫£n",
            description = """
                Tr·∫£ v·ªÅ danh s√°ch t·∫•t c·∫£ t√†i kho·∫£n hi·ªán c√≥ trong h·ªá th·ªëng (ch·ªâ d√†nh cho Admin).

                üìå `requesterId` l√† ID c·ªßa t√†i kho·∫£n g·ª≠i request, d√πng ƒë·ªÉ x√°c th·ª±c quy·ªÅn admin.

                üîÅ Tr·∫£ v·ªÅ: Danh s√°ch t·∫•t c·∫£ Account.
            """
        )
        public ResponseEntity<?> getAllAccounts(@RequestParam Integer requesterId) {
            verifyAdmin(requesterId);
            return ResponseEntity.ok(accountService.getAllAccounts());
        }


        @PutMapping("/{id}")
        @Operation(
            summary = "C·∫≠p nh·∫≠t t√†i kho·∫£n",
            description = """
                C·∫≠p nh·∫≠t th√¥ng tin t√†i kho·∫£n theo ID (ch·ªâ d√†nh cho Admin).

                ‚úÖ Tr∆∞·ªùng y√™u c·∫ßu trong body (AccountDTO):
                - username (String)
                - password (String)
                - email (String)
                - phone (String)
                - roleId (Integer)
                - approvedBy (Integer)
                - isActive (Boolean)
                - isApproved (Boolean)

                üìå `requesterId` l√† ID c·ªßa t√†i kho·∫£n g·ª≠i request, d√πng ƒë·ªÉ x√°c th·ª±c quy·ªÅn admin.

                üîÅ Tr·∫£ v·ªÅ: Account ƒë√£ c·∫≠p nh·∫≠t n·∫øu th√†nh c√¥ng.
            """
        )
        public ResponseEntity<?> updateAccount(@PathVariable Integer id, @RequestBody AccountDTO dto, @RequestParam Integer requesterId) {
            verifyAdmin(requesterId);
            accessLogService.logAction(requesterId, "C·∫≠p nh·∫≠t t√†i kho·∫£n");
            return ResponseEntity.ok(accountService.updateAccount(id, dto));
        }


        @DeleteMapping("/{id}")
        @Operation(
            summary = "X√≥a t√†i kho·∫£n",
            description = """
                X√≥a t√†i kho·∫£n theo ID (ch·ªâ d√†nh cho Admin).

                üìå `requesterId` l√† ID c·ªßa t√†i kho·∫£n g·ª≠i request, d√πng ƒë·ªÉ x√°c th·ª±c quy·ªÅn admin.

                üîÅ Tr·∫£ v·ªÅ: Th√¥ng b√°o x√≥a th√†nh c√¥ng n·∫øu th·ª±c hi·ªán ƒë∆∞·ª£c.
            """
        )
        public ResponseEntity<?> deleteAccount(@PathVariable Integer id, @RequestParam Integer requesterId) {
            verifyAdmin(requesterId);
            accountService.deleteAccount(id);
            accessLogService.logAction(requesterId, "X√≥a t√†i kho·∫£n");
            return ResponseEntity.ok("T√†i kho·∫£n ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng.");
        }


        @PutMapping("/{id}/activate")
        @Operation(
            summary = "K√≠ch ho·∫°t t√†i kho·∫£n",
            description = """
                K√≠ch ho·∫°t t√†i kho·∫£n (ch·ªâ d√†nh cho Admin).

                üìå `requesterId` l√† ID c·ªßa t√†i kho·∫£n g·ª≠i request, d√πng ƒë·ªÉ x√°c th·ª±c quy·ªÅn admin.

                üîÅ Tr·∫£ v·ªÅ: Account ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t.
            """
        )
        public ResponseEntity<?> activateAccount(@PathVariable Integer id, @RequestParam Integer requesterId) {
            verifyAdmin(requesterId);
            accessLogService.logAction(requesterId, "K√≠ch ho·∫°t");
            return ResponseEntity.ok(accountService.setActiveStatus(id, true));
        }


        @PutMapping("/{id}/deactivate")
        @Operation(
            summary = "H·ªßy k√≠ch ho·∫°t t√†i kho·∫£n",
            description = """
                H·ªßy k√≠ch ho·∫°t t√†i kho·∫£n (ch·ªâ d√†nh cho Admin).

                üìå `requesterId` l√† ID c·ªßa t√†i kho·∫£n g·ª≠i request, d√πng ƒë·ªÉ x√°c th·ª±c quy·ªÅn admin.

                üîÅ Tr·∫£ v·ªÅ: Account ƒë√£ ƒë∆∞·ª£c h·ªßy k√≠ch ho·∫°t.
            """
        )
        public ResponseEntity<?> deactivateAccount(@PathVariable Integer id, @RequestParam Integer requesterId) {
            verifyAdmin(requesterId);
            accessLogService.logAction(requesterId, "H·ªßy k√≠ch ho·∫°t");
            return ResponseEntity.ok(accountService.setActiveStatus(id, false));
        }

        @GetMapping("/logs")
        @Operation(
            summary = "Xem l·ªãch s·ª≠ ho·∫°t ƒë·ªông ng∆∞·ªùi d√πng",
            description = """
                Tr·∫£ v·ªÅ danh s√°ch c√°c ho·∫°t ƒë·ªông truy c·∫≠p c·ªßa t·∫•t c·∫£ t√†i kho·∫£n (ch·ªâ d√†nh cho Admin).

                üìå `requesterId` l√† ID t√†i kho·∫£n y√™u c·∫ßu (Admin).

                üîÅ Tr·∫£ v·ªÅ: Danh s√°ch AccessLogDTO.
            """
        )
        public ResponseEntity<?> getAccessLogs(@RequestParam Integer requesterId) {
            verifyAdmin(requesterId);

            List<AccessLogDTO> logs = accessLogRepository.findAll().stream()
                    .map(log -> {
                        AccessLogDTO dto = new AccessLogDTO();
                        dto.setAccountId(log.getAccount().getId());
                        dto.setUsername(log.getAccount().getUsername());
                        dto.setAction(log.getAction());
                        dto.setTimestamp(log.getTimestamp().atZone(ZoneId.systemDefault()).toLocalDateTime());
                        return dto;
                    })
                    .collect(Collectors.toList());

            return ResponseEntity.ok(logs);
        }
    }
