package org.example.flyora_backend.controller;

import java.util.List;
import java.util.Map;

import org.example.flyora_backend.DTOs.CreateProductDTO;
import org.example.flyora_backend.DTOs.OwnerProductListDTO;
import org.example.flyora_backend.DTOs.TopProductDTO;
import org.example.flyora_backend.model.Account;
import org.example.flyora_backend.model.Product;
import org.example.flyora_backend.service.AccessLogService;
import org.example.flyora_backend.service.OwnerService;
import org.example.flyora_backend.utils.JwtUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;

@RestController
@RequestMapping("/api/v1/owner")
@Tag(name = "Shop Owner & Staff", description = "C√°c API c·ªßa ch·ªß Shop v√† nh√¢n vi√™n")
public class OwnerController {

    @Autowired
    private AccessLogService accessLogService;

    @Autowired
    private JwtUtil jwtUtil;

    @Autowired
    private OwnerService ownerService;

    @Operation(summary = "Xem danh s√°ch s·∫£n ph·∫©m b√°n ch·∫°y theo doanh s·ªë", description = """
                ‚úÖ D√†nh cho Shop Owner:
                - H·ªá th·ªëng tr·∫£ v·ªÅ danh s√°ch c√°c s·∫£n ph·∫©m thu·ªôc Shop c·ªßa ng∆∞·ªùi d√πng,
                ƒë∆∞·ª£c s·∫Øp x·∫øp theo t·ªïng s·ªë l∆∞·ª£ng b√°n ra (`totalSold`) gi·∫£m d·∫ßn.

                ‚úÖ Response m·ªói item g·ªìm:
                - productId: ID s·∫£n ph·∫©m
                - productName: T√™n s·∫£n ph·∫©m
                - imageUrl: URL h√¨nh ·∫£nh (l·∫•y t·ª´ b·∫£ng chi ti·∫øt)
                - totalSold: T·ªïng s·ªë l∆∞·ª£ng ƒë√£ b√°n
                - price: Gi√° s·∫£n ph·∫©m

                ‚ùå N·∫øu kh√¥ng ph·∫£i ShopOwner: tr·∫£ v·ªÅ HTTP 403 (FORBIDDEN)

                ‚ùå N·∫øu token kh√¥ng h·ª£p l·ªá: tr·∫£ v·ªÅ HTTP 401 (UNAUTHORIZED)
            """)
    @GetMapping("/dashboard/products/top-sales")
    public ResponseEntity<List<TopProductDTO>> getTopSellingProducts(@RequestHeader("Authorization") String token) {
        try {
            Account account = jwtUtil.getAccountFromToken(token);

            if (!"ShopOwner".equalsIgnoreCase(account.getRole().getName())) {
                return ResponseEntity.status(HttpStatus.FORBIDDEN).build();
            }

            List<TopProductDTO> topProducts = ownerService.getTopSellingProducts(account.getId());
            accessLogService.logAction(account.getId(), "Viewed dashboard - top-selling products");

            return ResponseEntity.ok(topProducts);
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();
        }
    }

    @Operation(summary = "Th√™m s·∫£n ph·∫©m m·ªõi", description = """
                ‚úÖ D√†nh cho ShopOwner:
                - Th√™m s·∫£n ph·∫©m m·ªõi v√†o h·ªá th·ªëng, t·ª± ƒë·ªông g·∫Øn chi ti·∫øt theo lo·∫°i s·∫£n ph·∫©m:
                  FOODS, TOYS ho·∫∑c FURNITURE.

                ‚úÖ Request:
                - Truy·ªÅn `CreateProductDTO` bao g·ªìm th√¥ng tin s·∫£n ph·∫©m & chi ti·∫øt.

                üì¶ Response:
                - message: Th√¥ng b√°o th√†nh c√¥ng
                - productId: ID s·∫£n ph·∫©m v·ª´a t·∫°o

                ‚ùå N·∫øu kh√¥ng ph·∫£i ShopOwner: tr·∫£ v·ªÅ HTTP 403 (FORBIDDEN)
                ‚ùå N·∫øu d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá: tr·∫£ v·ªÅ HTTP 400 (BAD REQUEST)
            """)
    @PostMapping("/products")
    public ResponseEntity<?> addProduct(
            @RequestBody CreateProductDTO dto,
            @RequestHeader("Authorization") String token) {
        Account account = jwtUtil.getAccountFromToken(token);
        Integer accountId = account.getId();
        String role = account.getRole().getName();

        if (!"ShopOwner".equals(role)) {
            return ResponseEntity.status(HttpStatus.FORBIDDEN).body("Only shop owner can add products");
        }

        try {
            Product newProduct = ownerService.createProduct(dto, accountId);
            accessLogService.logAction(accountId, "ShopOwner t·∫°o s·∫£n ph·∫©m m·ªõi: " + newProduct.getId());
            return ResponseEntity.ok(Map.of(
                    "message", "Th√™m s·∫£n ph·∫©m th√†nh c√¥ng",
                    "productId", newProduct.getId()));
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(e.getMessage());
        }
    }

    @Operation(summary = "L·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m", description = """
                ‚úÖ D√†nh cho ShopOwner v√† Staff:
                - Tr·∫£ v·ªÅ danh s√°ch t·∫•t c·∫£ s·∫£n ph·∫©m thu·ªôc Shop c·ªßa ng∆∞·ªùi d√πng.
                - S·∫Øp x·∫øp theo ID tƒÉng d·∫ßn.
                - G·ªìm tr·∫°ng th√°i h√†ng h√≥a: "C√≤n h√†ng" ho·∫∑c "H·∫øt h√†ng".

                üì¶ M·ªói item g·ªìm:
                - id, name, price, stock, status, imageUrl

                ‚ùå N·∫øu kh√¥ng ph·∫£i ShopOwner ho·∫∑c Staff: HTTP 403
            """)
    @GetMapping("/products")
    public ResponseEntity<?> getAllProducts(@RequestHeader("Authorization") String token) {
        Account account = jwtUtil.getAccountFromToken(token);
        String role = account.getRole().getName();

        if (!role.equals("ShopOwner") && !role.equals("Staff")) {
            return ResponseEntity.status(HttpStatus.FORBIDDEN)
                    .body("Ch·ªâ Shop Owner ho·∫∑c Staff m·ªõi ƒë∆∞·ª£c ph√©p xem danh s√°ch s·∫£n ph·∫©m");
        }

        List<OwnerProductListDTO> products = ownerService.getAllProductsByOwner(account.getId());
        accessLogService.logAction(account.getId(), "Xem danh s√°ch s·∫£n ph·∫©m");

        return ResponseEntity.ok(products);
    }

    @Operation(summary = "Ch·ªânh s·ª≠a s·∫£n ph·∫©m", description = """
                ‚úÖ D√†nh cho ShopOwner v√† Staff:
                - C·∫≠p nh·∫≠t th√¥ng tin s·∫£n ph·∫©m theo ID.
                - Bao g·ªìm c·∫≠p nh·∫≠t c·∫£ th√¥ng tin chi ti·∫øt (FOODS, TOYS, FURNITURE).

                üì¶ Response:
                - Tr·∫£ v·ªÅ `Product` sau khi c·∫≠p nh·∫≠t.

                ‚ùå N·∫øu kh√¥ng c√≥ quy·ªÅn: HTTP 403
                ‚ùå N·∫øu d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá: HTTP 400
            """)
    @PutMapping("/products/{id}")
    public ResponseEntity<?> editProduct(
            @RequestHeader("Authorization") String token,
            @PathVariable Integer id,
            @RequestBody CreateProductDTO dto) {
        Account account = jwtUtil.getAccountFromToken(token);
        String role = account.getRole().getName();

        if (!"ShopOwner".equals(role) && !"Staff".equals(role)) {
            return ResponseEntity.status(HttpStatus.FORBIDDEN)
                    .body("Ch·ªâ ShopOwner ho·∫∑c Staff m·ªõi ƒë∆∞·ª£c ph√©p ch·ªânh s·ª≠a s·∫£n ph·∫©m");
        }

        try {
            Product updated = ownerService.updateProduct(id, dto, account.getId());
            accessLogService.logAction(account.getId(), "Ch·ªânh s·ª≠a s·∫£n ph·∫©m: " + id);
            return ResponseEntity.ok(updated);
        } catch (RuntimeException e) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(e.getMessage());
        }
    }

    @Operation(summary = "X√≥a s·∫£n ph·∫©m", description = """
                ‚úÖ Ch·ªâ d√†nh cho ShopOwner:
                - X√≥a s·∫£n ph·∫©m theo ID.

                üì¶ Response:
                - Tr·∫£ v·ªÅ chu·ªói th√¥ng b√°o "X√≥a s·∫£n ph·∫©m th√†nh c√¥ng"

                ‚ùå N·∫øu kh√¥ng ph·∫£i ShopOwner: HTTP 403
                ‚ùå N·∫øu s·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i ho·∫∑c kh√¥ng thu·ªôc quy·ªÅn s·ªü h·ªØu: HTTP 400
            """)
    @DeleteMapping("/products/{id}")
    public ResponseEntity<?> deleteProduct(
            @RequestHeader("Authorization") String token,
            @PathVariable Integer id) {
        Account account = jwtUtil.getAccountFromToken(token);
        String role = account.getRole().getName();

        if (!"ShopOwner".equals(role)) {
            return ResponseEntity.status(HttpStatus.FORBIDDEN)
                    .body("Ch·ªâ ShopOwner m·ªõi ƒë∆∞·ª£c ph√©p x√≥a s·∫£n ph·∫©m");
        }

        try {
            ownerService.deleteProduct(id, account.getId());
            accessLogService.logAction(account.getId(), "X√≥a s·∫£n ph·∫©m: " + id);
            return ResponseEntity.ok("X√≥a s·∫£n ph·∫©m th√†nh c√¥ng");
        } catch (RuntimeException e) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(e.getMessage());
        }
    }

}
